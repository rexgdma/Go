模块一
golang特性（为什么需要golang？ 他与其它语言有什么不同？他适合什么场景？）

其他编程语言的弊端。
• 硬件发展速度远远超过软件。
• C 语言等原生语言缺乏好的依赖管理 (依赖头文件）。
• Java 和 C++ 等语言过于笨重。
• 系统语言对垃圾回收和并行计算等基础功能缺乏支持。
• 对多核计算机缺乏支持

Go 语言是一个可以编译高效，支持高并发的，面向垃圾回收的全新语言

• 秒级完成大型程序的单节点编译。

• 依赖管理清晰。

• 不支持继承，程序员无需花费精力定义不同类型之间的关系。

• 支持垃圾回收，支持并发执行，支持多线程通讯。

• 对多核计算机支持友好。

**Go 语言不支持的特性**

• 不支持函数重载和操作符重载

• 为了避免在 C/C++ 开发中的一些 Bug 和混乱，不支持隐式转换

• 支持接口抽象，不支持继承

• 不支持动态加载代码

• 不支持动态链接库

• 通过 recover 和 panic 来替代异常机制

• 不支持断言

• 不支持静态变量



go语言的来源：

1. CSP多线程模型
2. 基本语法和数据结构来自C语言
3. 接口抽象来自java
4. 包定义来自java
5. 多态支持来自javascript和其它动态语言
6. 应用在docker, kubernetes, istio 



golang CSP 多线程模型：

多线程模式传统的共享内存方式，lock,条件变量

消息传递的方式， Actor模型和CSP模型。

Actor需要一个容量无限的mailbox，而CSP的Channel 可以完全不需要缓冲消息或设置有限的缓冲

CSP允许通过使用channel通道避免生产者和消费者之间的耦合;他们不需要了解对方

看起来Actor更像函数调用，需要知道函数名，而CSP更类似于MQ消息队列

不过Actor更适用于多机器分布式并发场景，CSP更适用于单台机器并发

